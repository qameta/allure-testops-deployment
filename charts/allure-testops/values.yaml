## there is no correlation between helm chart release and Allure TestOps release

## this is Allure TestOps release to be deployed
version: 4.6.0

## Credentials for accessing AllureTestOps as Admin on default auth scheme
username: admin
password: admin

## Security Context
## 65534 started by a user with lowest privilegies
## Openshift requires different range e.g. >= 1000620000
containerSecurityContext:
  enabled: true
  runAsUser: 65534

## your-domain.tld
## the real DNS name (FQDN) of the allure testops instance
host: alure.host.name

## Registry Auth. Access to registry secrets can be obtained from QAMeta team
registry:
  # Private registry or Proxy like Nexus
  enabled: false
  # Registry Domain like quay.io / docker.io / ghcr.io / ...
  # registry to pull images from
  # default is docker.io
  repo: docker.io
  # Prefix with registry name
  # slug for the registry, i.e. 'docker' for dl.qameta.io
  name: allure
  # name of registry secret
  imagePullSecret: qameta-secret
  pullPolicy: IfNotPresent
  auth:
    # provided by Qameta Software
    # by default qametaaccess as username and random password provided by sales
    username: foo
    password: bar



###
## Strategy for updating Gateway & UAA components
###
strategy:
  type: RollingUpdate
  rollingUpdate:
    maxUnavailable: 0

###
# Skip Kubernetes secret creation. It is for cases when Secret is created and managed by external means, for example using external-secrets
# Do not enable unless you know what you're doing.
###
externalSecrets:
  enabled: true
# Provide a custom name for externally-provided Secret
#  name: ""

network:
  # Nginx Ingress
  ingress:
    # Update if you are using nginx as ingress controller
    enabled: false
    className:
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/ssl-redirect: "false"
      nginx.ingress.kubernetes.io/proxy-body-size: "500m"

  ###
  ## Istio Gateway
  ## Prior to deployment, label Namespace with istio-injection=enabled to make Istio inject Envoy Sidecars
  istio:
    # To be enabled (set to true) if you are using istio
    enabled: false
    gatewaySelector:
      istio: ingressgateway
    # makes Allure TestOps accessible from Jira Plugin iFrame
    # Update this with real Jira instance URL
    domain_exceptions: "https://jira.your-domain.io https://jira.your-domain.com"

  ###
  ## OpenShift Route
  ##
  route:
    enabled: false
    annotations: {}
    tls: {}
  # TLS Settings
  tls:
    # to be set to 'true' if SSL is to be used for your deployment
    enabled: false
    secretName: allure-tls # Secret with SSL termination secrets.
    hstsEnabled: false
  # Important! Qameta Team doesn't provide Certmanager itself, if you don't have one,
  # install from https://cert-manager.io/docs/installation/ and create ClusterIssuer
  # and provide Challenge type e.g. acme http-01 or dns-01
  certmanager:
    # To be set to 'true' if a certification manager to be used for the deployment
    enabled: false
    # It is important where certificate is located depending on your Ingress/Istio Gateway
    # IstioGateway require secrets with tls certs to be located in istio-system ns
    namespace: istio-system
    # As Let's Encrypt is not the only provider, you may use your own.
    issuerName: letsencrypt-issuer
    issuerGroup: cert-manager.io

# Redis Config
redis:
  # Set to 'false' if you have Redis deployed in your infrastructure and you are allowed to use it with Allure TestOps
  enabled: true
  # External Redis Host
  host: redis.example.com
  architecture: standalone
  auth:
    password: allure
  sentinel:
    enabled: false
    masterSet: big_master
    nodes: []
  master:
    podLabels:
      app: redis
      version: v1

# RabbitMQ Config
rabbitmq:
  # If set to 'true', then Helm chart will deploy RabbitMQ
  # Update to 'false' if you have RabbitMQ deployed in your infrastructure and you are allowed to use it with Allure TestOps
  enabled: true
  host: mq.example.com
  port: 5672
  auth:
    # If you have dedicated RabbitMQ server, then take this value from dedicated RabbitMQ settings
    # Otherwise set to your own random string
    erlangCookie: fTwP5LxRVjZ9XJkyWmJSKR5hPDWMjkQx
    # Credentials for RabbitMQ
    username: allure
    password: allure
  resources: {}

postgresql:
  # If enabled ('true'), then Helm chart will deploy PostgreSQL database as part of the deployment
  # If set to 'false' the deployment will use dedicated PostgreSQL database server deployed in your infrastructure
  enabled: true
  connectionTimeout: 60000
  auth:
    username: allure
    password: allure
  external:
    uaaHost: db.example.com
    uaaPort: 5432
    reportHost: db.example.com
    reportPort: 5432
    sslMode: prefer
    uaaDbName: uaa
    uaaUsername: uaa
    uaaPassword: secret
    reportDbName: report
    reportUsername: report
    reportPassword: secret
  # this works for postgres in the pod only. For external DB you need to execute these manually when creating the databases
  primary:
    initdb:
      scripts:
        init.sql: |
          CREATE DATABASE uaa TEMPLATE template0 ENCODING 'utf8' LC_COLLATE = 'en_US.UTF-8' LC_CTYPE = 'en_US.UTF-8';
          CREATE DATABASE report TEMPLATE template0 ENCODING 'utf8' LC_COLLATE = 'en_US.UTF-8' LC_CTYPE = 'en_US.UTF-8';
  persistence:
    size: 20Gi

# Local FS is NOT disabled for migration purpose. Please bear in mind that primary FS for allure is S3
fs:
  # Supported: S3, LOCAL, NFS
  type: "S3"
  external: false
  pathstyle: true
  migration:
    # should be false all the time except the 1 migration from FS to S3
    enabled: false
    # for FS only
    directory: /opt/allure/report/storage
  s3:
    # the URL should be like https://s3.region.amazonaws.com if your region is not us-east-1
    endpoint: https://s3.amazonaws.com
    bucket: allure-testops
    region: us-east-1
    # If you run Allure Testops in AWS EKS you don't need stating accessKey & secretKey
    accessKey: foo
    secretKey: bar
  # Required only if type is Local or NFS
  mountPoint: /storage
  # Create NFS Volume First as PV
  # needed for migration purposes only, do not change it if you are not migratung the data from PVC
  pvc:
    claimName: ""

###
# AWS Injection (STS)
# Make Sure you have RBAC enabled
# Ref: https://aws.amazon.com/blogs/opensource/introducing-fine-grained-iam-roles-service-accounts/
###
aws:
  # This is to be updated to 'true', otherwise will be ignored
  enabled: false
  # Your AWS ARN 
  # Update this values with your real value of your Amazon Role
  arn: arn:aws:iam::195700002069:role/allure_s3 



minio:
  enabled: true
  persistence:
    enabled: true
    storageClass: ""
    size: 200Gi

  auth:
    rootUser: WBuetMuTAMAB4M78NG3gQ4dCFJr3SSmU # Replace with your Access Key
    rootPassword: m9F4qupW4ucKBDQBWr4rwQLSAeC6FE2L # Replace with your Secret Key
  disableWebUI: true
  service:
    ports:
      api: 9000
  defaultBuckets: allure-testops
  defaultRegion: qameta-0
  gateway:
    # Turns minio into S3 Proxy. The only way to make Allure Testops work on Azure
    # Useful for self-hosted Ceph because acting as caching proxy
    enabled: false
    type: s3 # Could be azure, gcs, nas, s3 Details @ https://artifacthub.io/packages/helm/bitnami/minio Gateway
    replicaCount: 1
    auth:
      s3:
        serviceEndpoint: https://s3.amazonaws.com # Any S3 EP except azure, gcs
        # Note. Don't use these credentials if you run on Amazon AWS. Use ARN instead
        accessKey: foo
        secretKey: bar

certificates:
  # In case you use self-signed certificates, state all endpoints except for database
  # example: endpoints: ldaps.example.com:636,rabbit.example.com:5672
  # Script inside will retrieve certificate for you and store in jks store.
  endpoints:

# Provide your smtp config to let TestOps send you emails
smtp:
  enabled: false
  host: smtp.gmail.com
  port: 465
  authEnabled: true
  from: noreply@example.com
  username: sa-testops-smtp
  password: SuperSecret
  # https://en.wikipedia.org/wiki/Opportunistic_TLS
  startTLSEnabled: true
  startTLSRequired: true
  sslEnabled: true
  sslTrust: smtp.gmail.com

allure:
  # Allows unregistered users to register
  registrationEnabled: false
  # Lets users bypass admin's registration approval
  autoApprove: false
  # Update your time zone accordingly to the real settings of your server env
  timeZone: "Europe/London"
  sessionLifespan: 57600
  # Update secureCookies
  # Cookies settings as http-only. Needs to be set to "true" if you are using HTTPS, and set to "false" if HTTP is used to access Allure TestOps UI
  secureCookies: "true"
  logging: warn
  management:
    # Endpoints to expose e.g. for Prometheus, HealthChecks etc.
    expose: health,info,prometheus,configprops
    cacheTTL: 20s
  uaaContextPath: "/uaa/"
  reportContextPath: "/rs/"
  auth:
    # Available options system / oidc / saml2 / ldap
    primary: system
    # Possible roles: ROLE_ADMIN, ROLE_USER, ROLE_AUDITOR
    defaultRole: ROLE_USER
    ldap:
      enabled: false
      auth:
        user: user
        pass: pass
      referal: follow
      url: ldap://ldap.example.com:389
      user:
        dnPatterns: sAMAccountName={0}
        searchBase: dc=example,dc=com
        searchFilter: (&((objectClass=Person))(sAMAccountName={0}))
      group:
        searchBase: ou=qa,ou=Security Groups,dc=example,dc=com
        searchFilter: (&(objectClass=Group)(member={0}))
        roleAttribute: cn
      # Syncs User Role by Group membership on any login
      syncRoles: true
      uidAttribute: sAMAccountName
      # Maps your LDAP groups on Allure Groups
      userGroupName: allure_users
      adminGroupName: allure_admins
    # OIDC is Generic Client Name. Don't worry about it's not Google/Gitlab/Github/Keycloak/etc...
    oidc:
      enabled: false
      client:
        # Your client name, for example Okta
        name: Google Auth
        # Your clientId (Get one from OIDC provider)
        id: foo
        # Your clientSecret (Get one from OIDC provider)
        secret: bar
      # This parameter lets know where your OIDC provider is going to redirect client after successful login
      redirectURI: https://<your-domain>/login/oauth2/code/allure
      # URL of your auth provider
      issuerURI: https://accounts.google.com
      # This parameter tells allure-testops to use as username. It can be email
      userNameAttribute: preferred_username
      scope: openid,email,profile
      ## Parameters below are NOT compulsory. You need them only if your OIDC provider doesn't support OIDC discovery protocol

      # basic, post, etc...
      # More info: https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/oauth2/core/ClientAuthenticationMethod.html
      authMethod:
      # example (https://your-subdomain.oktapreview.com/oauth2/v1/authorize)
      authURI:
      # example (https://your-subdomain.oktapreview.com/oauth2/v1/token)
      tokenURI:
      # example (https://your-subdomain.oktapreview.com/oauth2/v1/userinfo)
      userInfoURI:
      # example (https://your-subdomain.oktapreview.com/oauth2/v1/keys)
      jwksURI:

    saml:
      enabled: false
      provider: crowd
      ACSLocation: https://<your-domain>/api/login/saml2/sso/crowd
      entityId: https://<testops>/api/login/saml2/service-provider-metadata/crowd
      identityProviderMetadataUri: https:///path/to/metadata.xml


gateway:
  replicaCount: 1
  image: allure-gateway
  tolerations: []
  affinity: {}
  nodeSelector: {}
  service:
    port: 8080
  env:
    open:
      JAVA_TOOL_OPTIONS: >
        -XX:+UseG1GC
        -XX:+UseStringDeduplication
        -Dsun.jnu.encoding=UTF-8
        -Dfile.encoding=UTF-8
  resources:
    requests:
      memory: 1Gi
      cpu: 1
    limits:
      memory: 2Gi
      cpu: 2
  probes:
    enabled: true
    liveness:
      probe:
        periodSeconds: 40
        timeoutSeconds: 2
        successThreshold: 1
        failureThreshold: 3
        initialDelaySeconds: 60
    readiness:
      probe:
        periodSeconds: 20
        timeoutSeconds: 2
        successThreshold: 1
        failureThreshold: 3
        initialDelaySeconds: 25


uaa:
  replicaCount: 1
  image: allure-uaa
  tolerations: []
  affinity: {}
  nodeSelector: {}
  service:
    port: 8082
  env:
    open:
      JAVA_TOOL_OPTIONS: >
        -XX:+UseG1GC
        -XX:+UseStringDeduplication
        -Dsun.jnu.encoding=UTF-8
        -Dfile.encoding=UTF-8
  # Considering resource planning bear in mind that many pods is good but DB connections are expensive
  resources:
    requests:
      memory: 1Gi
      cpu: 500m
    limits:
      memory: 2Gi
      cpu: 1
  probes:
    # Disable them during updates involving DB migrations
    enabled: true
    liveness:
      probe:
        periodSeconds: 40
        timeoutSeconds: 2
        successThreshold: 1
        failureThreshold: 3
        initialDelaySeconds: 60
    readiness:
      probe:
        periodSeconds: 20
        timeoutSeconds: 5
        successThreshold: 1
        failureThreshold: 10
        initialDelaySeconds: 60
  volumeMounts: []
  volumes: []

report:
  replicaCount: 1
  image: allure-report
  tolerations: []
  affinity: {}
  nodeSelector: {}
  service:
    port: 8081
  persistence:
    accessMode: ReadWriteOnce
    size: 10Gi
    annotations: {}
    finalizers:
      - kubernetes.io/pvc-protection
  env:
    open:
      JAVA_TOOL_OPTIONS: >
        -XX:+UseG1GC
        -XX:+UseStringDeduplication
        -Dsun.jnu.encoding=UTF-8
        -Dfile.encoding=UTF-8
  # Considering resource planning bear in mind that many pods is good but DB connections are expensive
  resources:
    requests:
      memory: 3Gi
      cpu: 1
    limits:
      memory: 4Gi
      cpu: 4
  probes:
    # Disable them during updates involving DB migrations
    enabled: true
    liveness:
      probe:
        periodSeconds: 40
        timeoutSeconds: 2
        successThreshold: 1
        failureThreshold: 3
        initialDelaySeconds: 300
    readiness:
      probe:
        periodSeconds: 30
        timeoutSeconds: 5
        successThreshold: 1
        failureThreshold: 130
        initialDelaySeconds: 60

# Before enabling monitoring make sure you have Prometheus & Prometheus Operator Installed
monitoring:
  enabled: false

### Always leave it as it is
## Role Based Access Control
## Ref: https://kubernetes.io/docs/admin/authorization/rbac/
###
rbac:
  enabled: true
  rules:
    - apiGroups:
        - ''
      resources:
        - endpoints
        - services
        - pods
        - configmaps
        - secrets
      verbs:
        - get
        - watch
        - list
