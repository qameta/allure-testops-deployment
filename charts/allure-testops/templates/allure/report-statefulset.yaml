---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "allure-testops.report.fullname" . }}
  labels:
    app: {{ template "allure-testops.report.fullname" . }}
    version: v1
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  replicas: {{ .Values.report.replicaCount }}
  serviceName: {{ template "allure-testops.report.fullname" . }}
  selector:
    matchLabels:
      app: {{ template "allure-testops.report.fullname" . }}
      version: v1
  template:
    metadata:
      labels:
        app: {{ template "allure-testops.report.fullname" . }}
        version: v1
      annotations:
        co.elastic.logs/multiline.pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:"
        co.elastic.logs/multiline.match: after
        co.elastic.logs/multiline.negate: "true"
    spec:
      terminationGracePeriodSeconds: 30
{{- if .Values.rbac.enabled }}
      serviceAccountName: {{ template "allure-testops.name" . }}-sa
{{- end }}
{{- if .Values.registry.enabled }}
      imagePullSecrets:
      - name: {{ .Values.registry.imagePullSecret }}
{{- else if .Values.registry.externalImageSecret }}
      imagePullSecrets:
        - name: {{ .Values.registry.imagePullSecret }}
{{- end }}
      tolerations:
{{ toYaml .Values.report.tolerations | indent 8 }}
{{- if .Values.report.affinity }}
      affinity:
{{ toYaml .Values.report.affinity | indent 8 }}
{{- end }}
{{- if .Values.report.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.report.nodeSelector | indent 8 }}
{{- end }}
{{- if .Values.postgresql.enabled }}
      initContainers:
        - name: check-db-ready
          image: postgres:9.6.5
          command: [ 'sh', '-c',
            'until pg_isready -h {{ template "allure-testops.postgresql.fullname" . }} -p 5432;
             do echo waiting for database; sleep 2; done;' ]
{{- else }}
      initContainers:
        - name: check-db-ready
          image: postgres:9.6.5
          command: [ 'sh', '-c',
            'until pg_isready -h {{ .Values.postgresql.external.reportHost }} -p {{ .Values.postgresql.external.reportPort }};
            do echo waiting for database; sleep 2; done;' ]
{{- end }}
      containers:
      - name: {{ template "allure-testops.report.fullname" . }}
        image: "{{ .Values.registry.repo }}/{{ .Values.registry.name }}/{{ .Values.report.image }}:{{ .Values.version | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.registry.pullPolicy }}
        securityContext:
          runAsUser: {{ .Values.runAsUser }}
        ports:
        - name: http
          containerPort: 8081
        env:
{{- $secret_name := include "allure-testops.secret.name" . }}
        - name: ALLURE_ENDPOINT
{{- if .Values.network.tls.enabled }}
          value: "https://{{ .Values.host }}"
{{- else }}
          value: "http://{{ .Values.host }}"
        - name: SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWKSETURI
          value: "http://{{ template "allure-testops.gateway.fullname" . }}:{{ .Values.gateway.service.port }}/.well-known/jwks.json"
{{- end }}
{{- if .Values.rabbitmq.enabled }}
        - name: SPRING_RABBITMQ_HOST
          value: "{{ template "allure-testops.rabbitmq.fullname" . }}"
{{- else }}
        - name: SPRING_RABBITMQ_HOST
          value: "{{ .Values.rabbitmq.host }}"
{{- end }}
{{- if .Values.postgresql.enabled }}
        - name: SPRING_DATASOURCE_URL
          value: "jdbc:postgresql://{{ template "allure-testops.postgresql.fullname" . }}/report"
{{- else }}
        - name: SPRING_DATASOURCE_URL
          value: "jdbc:postgresql://{{ .Values.postgresql.external.reportHost }}:{{ .Values.postgresql.external.reportPort }}/{{ .Values.postgresql.external.reportDbName }}?sslmode={{ .Values.postgresql.external.sslMode}}"
{{- end }}
{{- if eq .Values.fs.type "S3" }}
{{- if .Values.fs.external }}
        - name: ALLURE_BLOBSTORAGE_S3_ENDPOINT
          value: "{{ .Values.fs.s3.endpoint }}"
        - name: ALLURE_BLOBSTORAGE_S3_BUCKET
          value: "{{ .Values.fs.s3.bucket }}"
        - name: ALLURE_BLOBSTORAGE_S3_REGION
          value: "{{ .Values.fs.s3.region }}"
{{- else }}
        - name: ALLURE_BLOBSTORAGE_S3_ENDPOINT
          value: "http://{{ template "allure-testops.minio.fullname" . }}:{{ .Values.minio.service.ports.api }}"
        - name: ALLURE_BLOBSTORAGE_S3_BUCKET
          value: "{{ .Values.minio.defaultBuckets }}"
        - name: ALLURE_BLOBSTORAGE_S3_REGION
          value: "{{ .Values.minio.defaultRegion }}"
{{- end }}
{{- if not .Values.aws.enabled }}
        - name: ALLURE_BLOBSTORAGE_S3_PATHSTYLEACCESS
          value: "{{ .Values.fs.pathstyle }}"
        - name: ALLURE_BLOBSTORAGE_S3_ACCESSKEY
          valueFrom:
            secretKeyRef:
              name: {{ $secret_name }}
              key: "s3AccessKey"
        - name: ALLURE_BLOBSTORAGE_S3_SECRETKEY
          valueFrom:
            secretKeyRef:
              name: {{ $secret_name }}
              key: "s3SecretKey"
{{- end }}
        - name: ALLURE_BLOBSTORAGE_TYPE
          value: S3
{{- else }}
        - name: ALLURE_BLOBSTORAGE_TYPE
          value: FILE_SYSTEM
        - name: ALLURE_BLOBSTORAGE_FILESYSTEM_DIRECTORY
          value: "{{ .Values.fs.mountPoint }}"
{{- end }}
{{- range $name, $value := .Values.report.env.open }}
        - name: {{ $name | quote }}
          value: {{ $value | quote }}
{{- end }}
        - name: "ALLURE_CRYPTO_PASSWORD"
          valueFrom:
            secretKeyRef:
              name: {{ $secret_name }}
              key: "password"
        - name: SPRING_DATASOURCE_USERNAME
          valueFrom:
            secretKeyRef:
              name: {{ $secret_name }}
              key: "reportDbUser"
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ $secret_name }}
              key: "reportDbPass"
        - name: SPRING_RABBITMQ_USERNAME
          valueFrom:
            secretKeyRef:
              name: {{ $secret_name }}
              key: "rabbitUser"
        - name: SPRING_RABBITMQ_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ $secret_name }}
              key: "rabbitPass"
        - name: SPRING_DATASOURCE_DRIVER_CLASS_NAME
          value: "org.postgresql.Driver"
        - name: SPRING_JPA_DATABASE_PLATFORM
          value: "org.hibernate.dialect.PostgreSQL9Dialect"
        - name: SPRING_JPA_PROPERTIES_HIBERNATE_GLOBALLY_QUOTED_IDENTIFIERS
          value: "true"
        - name: SPRING_DATASOURCE_HIKARI_CONNECTIONTIMEOUT
          value: "{{ .Values.postgresql.connectionTimeout }}"
        - name: TZ
          value: "{{ .Values.allure.timeZone }}"
        - name: SERVER_SERVLET_CONTEXTPATH
          value: "{{ .Values.allure.reportContextPath }}"
        - name: SPRING_OUTPUT_ANSI_ENABLED
          value: "never"
        - name: LOGGING_LEVEL_IO_QAMETA_ALLURE
          value: "{{ .Values.allure.logging }}"
        - name: LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY
          value: "{{ .Values.allure.logging }}"
        - name: LOGGING_LEVEL_IO_QAMETA_ALLURE_REPORT_ISSUE_LISTENER
          value: "error"
        - name: LOGGING_LEVEL_ORG_SPRINGFRAMEWORK
          value: "{{ .Values.allure.logging }}"
        - name: LOGGING_LEVEL_COM_ZAXXER_HIKARI
          value: "{{ .Values.allure.logging }}"
        - name: SPRING_PROFILES_ACTIVE
          value: kubernetes
        - name: MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED
          value: 'true'
        - name: MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE
          value: "{{ .Values.allure.management.expose }}"
        - name: MANAGEMENT_ENDPOINT_HEALTH_CACHE_TIME-TO-LIVE
          value: "{{ .Values.allure.management.cacheTTL }}"
        - name: MANAGEMENT_HEALTH_DISKSPACE_ENABLED
          value: "false"
        - name: MANAGEMENT_HEALTH_KUBERNETES_ENABLED
          value: "false"
        - name: SPRING_CLOUD_DISCOVERY_CLIENT_HEALTH_INDICATOR_ENABLED
          value: "false"
        - name: SERVER_ERROR_INCLUDE_STACKTRACE
          value: "always"
        - name: ALLURE_EE_REPORT_SERVICE_HOST
          value: "{{ template "allure-testops.report.fullname" . }}"
        - name: ALLURE_EE_REPORT_SERVICE_PORT
          value: "{{ .Values.report.service.port }}"
        - name: ALLURE_EE_UAA_SERVICE_HOST
          value: "{{ template "allure-testops.uaa.fullname" . }}"
        - name: ALLURE_EE_UAA_SERVICE_PORT
          value: "{{ .Values.uaa.service.port }}"
        - name: ALLURE_EE_GATEWAY_SERVICE_HOST
          value: "{{ template "allure-testops.gateway.fullname" . }}"
        - name: ALLURE_EE_GATEWAY_SERVICE_PORT
          value: "{{ .Values.gateway.service.port }}"
{{- if eq .Values.postgresql.external.sslMode "require" }}
        - name: TLS_DB_ENDPOINTS
          value: "{{ .Values.postgresql.external.reportHost}}:{{ .Values.postgresql.external.reportPort }}"
{{- end }}
{{- if .Values.certificates.endpoints }}
        - name: TLS_ENDPOINTS
          value: "{{ .Values.certificates.endpoints }}"
{{- end }}
{{- if .Values.report.probes.enabled }}
        livenessProbe:
          httpGet:
            path: {{ .Values.allure.reportContextPath }}management/health
            port: http
{{ toYaml .Values.report.probes.liveness.probe | indent 10 }}
        readinessProbe:
          httpGet:
            path: {{ .Values.allure.reportContextPath }}management/health
            port: http
{{ toYaml .Values.report.probes.readiness.probe | indent 10 }}
{{- end }}
{{- with .Values.report.resources }}
        resources:
{{ toYaml . | indent 10 }}
{{- end }}
        volumeMounts:
{{- if eq .Values.fs.type "NFS" }}
          - mountPath: .Values.fs.mountPoint
            name: storage
{{- end }}
      volumes:
{{- if eq .Values.fs.type "NFS" }}
        - name: storage
          persistentVolumeClaim:
            claimName: {{ .Values.fs.pvc.claimName }}
{{- end }}

