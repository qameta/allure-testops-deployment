apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "allure-testops.uaa.fullname" . }}
  labels:
    app: {{ template "allure-testops.uaa.fullname" . }}
    version: v1
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  replicas: {{ .Values.uaa.replicaCount }}
  strategy:
{{ toYaml .Values.strategy | indent 4 }}
  selector:
    matchLabels:
      app: {{ template "allure-testops.uaa.fullname" . }}
      version: v1
  template:
    metadata:
      labels:
        app: {{ template "allure-testops.uaa.fullname" . }}
        version: v1
{{- if .Values.uaa.annotations }}
      annotations:
{{- range $key, $value := .Values.uaa.annotations }}
        {{ $key }}: {{ $value | quote }}
{{- end }}
{{- end }}
    spec:
{{- if .Values.rbac.enabled }}
      serviceAccountName: {{ .Values.rbac.serviceAccountName }}
{{- end }}
      imagePullSecrets:
        - name: {{ .Values.registry.imagePullSecret }}
      tolerations:
{{ toYaml .Values.uaa.tolerations | indent 8 }}
{{- if .Values.uaa.affinity }}
      affinity:
{{ toYaml .Values.uaa.affinity | indent 8 }}
{{- end }}
{{- if .Values.uaa.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.uaa.nodeSelector | indent 8 }}
{{- end }}
      initContainers:
        - name: db-readiness-check
          image: {{ .Values.postgresql.init.image | quote }}
{{- with .Values.postgresql.init.resources }}
          resources:
{{ toYaml . | indent 12 }}
{{- end }}
{{- if .Values.postgresql.external.pgbouncer.enabled }}
          command: [ 'sh', '-c',
            'until pg_isready -h {{ .Values.postgresql.external.uaaHost }} -p {{ .Values.postgresql.external.uaaPort }};
             do echo waiting for database; sleep 2; done;' ]
  {{- else }}
          command: [ 'sh', '-c',
            'until pg_isready -h {{ template "uaaDBHost" . }} -p {{ template "uaaDBPort" . }};
             do echo waiting for database; sleep 2; done;' ]
  {{- end }}
      containers:
        - name: {{ template "allure-testops.uaa.fullname" . }}
          image: "{{ template "getImageRegistry" . }}{{ .Values.uaa.image }}:{{ .Values.version | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.registry.pullPolicy }}
{{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
{{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.uaa.service.port }}
{{- $secret_name := include "allure-testops.secret.name" . }}
          env:
{{- if not .Values.allure.manualConfig }}
            - name: SERVER_PORT
              value: "{{ .Values.uaa.service.port }}"
{{- include "renderCommonEnvs" . | indent 10 }}
{{- include "renderCrypto" . | indent 10 }}
            - name: JAVA_TOOL_OPTIONS
              value: {{ template "renderJavaOpts" .Values.uaa.resources.requests.memory }}
{{- if or (eq .Values.postgresql.external.sslMode "require") (eq .Values.postgresql.external.sslMode "verify-ca") (eq .Values.postgresql.external.sslMode "verify-full") }}
            - name: SPRING_DATASOURCE_URL
              value: "jdbc:postgresql://{{ template "uaaDBHost" . }}:{{ template "uaaDBPort" . }}/{{ template "uaaDBName" . }}?sslmode={{ template "postgresSSL" . }}&sslfactory=org.postgresql.ssl.DefaultJavaSSLFactory"
{{- else }}
            - name: SPRING_DATASOURCE_URL
              value: "jdbc:postgresql://{{ template "uaaDBHost" . }}:{{ template "uaaDBPort" . }}/{{ template "uaaDBName" . }}?sslmode={{ template "postgresSSL" . }}"
{{- end }}
{{- if .Values.certificates.endpoints }}
            - name: TLS_ENDPOINTS
              value: "{{ .Values.certificates.endpoints }}"
{{- end }}
            - name: {{ .Values.build }}_REGISTRATION_ENABLED
              value: "{{ .Values.allure.registrationEnabled }}"
            - name: {{ .Values.build }}_REGISTRATION_AUTOAPPROVE
              value: "{{ .Values.allure.autoApprove }}"
            - name: {{ .Values.build }}_SECURITY_USER_NAME
              valueFrom:
                secretKeyRef:
                  name: {{ $secret_name }}
                  key: "username"
            - name: {{ .Values.build }}_SECURITY_USER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ $secret_name }}
                  key: "password"
            - name: SPRING_DATASOURCE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ $secret_name }}
                  key: uaaDbUser
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ $secret_name }}
                  key: uaaDbPass
            - name: SPRING_DATASOURCE_HIKARI_MAXIMUMPOOLSIZE
              value: "{{ .Values.uaa.maxDBConn }}"
            - name: SERVER_SERVLET_CONTEXTPATH
              value: "{{ .Values.allure.uaaContextPath }}"
            - name: {{ .Values.build }}_LOGIN_PRIMARY
              value: {{ .Values.allure.auth.primary }}
{{- if .Values.allure.auth.ldap.enabled }}
            - name: {{ .Values.build }}_LOGIN_LDAP_ENABLED
              value: "{{ .Values.allure.auth.ldap.enabled }}"
            - name: {{ .Values.build }}_LOGIN_LDAP_DEFAULTROLE
              value: {{ .Values.allure.auth.defaultRole }}
            - name: {{ .Values.build }}_LOGIN_LDAP_REFERRAL
              value: "{{ .Values.allure.auth.ldap.referral }}"
            - name: ALLURE_LOGIN_LDAP_LOWERCASEUSERNAMES
              value: "{{ .Values.allure.auth.ldap.usernamesToLowercase }}"
            - name: ALLURE_LOGIN_LDAP_PASSWORDATTRIBUTE
              value: "{{ .Values.allure.auth.ldap.passwordAttribute }}"
            - name: {{ .Values.build }}_LOGIN_LDAP_URL
              value: "{{ .Values.allure.auth.ldap.url }}"
            - name: {{ .Values.build }}_LOGIN_LDAP_USERDNPATTERNS
              value: "{{ .Values.allure.auth.ldap.user.dnPatterns }}"
            - name: {{ .Values.build }}_LOGIN_LDAP_USERSEARCHBASE
              value: "{{ .Values.allure.auth.ldap.user.searchBase }}"
            - name: {{ .Values.build }}_LOGIN_LDAP_USERSEARCHFILTER
              value: "{{ .Values.allure.auth.ldap.user.searchFilter }}"
            - name: {{ .Values.build }}_LOGIN_LDAP_UIDATTRIBUTE
              value: "{{ .Values.allure.auth.ldap.uidAttribute }}"
{{- if .Values.allure.auth.ldap.syncRoles }}
            - name: {{ .Values.build }}_LOGIN_LDAP_GROUPSEARCHBASE
              value: "{{ .Values.allure.auth.ldap.group.searchBase }}"
            - name: {{ .Values.build }}_LOGIN_LDAP_GROUPSEARCHFILTER
              value: "{{ .Values.allure.auth.ldap.group.searchFilter }}"
            - name: {{ .Values.build }}_LOGIN_LDAP_GROUPROLEATTRIBUTE
              value: "{{ .Values.allure.auth.ldap.group.roleAttribute }}"
            - name: {{ .Values.build }}_LOGIN_LDAP_SYNCROLES
              value: "{{ .Values.allure.auth.ldap.syncRoles }}"
            - name: {{ .Values.build }}_LOGIN_LDAP_GROUPAUTHORITIES_ROLEUSERGROUPS
              value: "{{ .Values.allure.auth.ldap.userGroupName }}"
            - name: {{ .Values.build }}_LOGIN_LDAP_GROUPAUTHORITIES_ROLEADMINGROUPS
              value: "{{ .Values.allure.auth.ldap.adminGroupName }}"
{{- end }}
            - name: {{ .Values.build }}_LOGIN_LDAP_USERDN
              valueFrom:
                secretKeyRef:
                  name: {{ $secret_name }}
                  key: ldapUser
            - name: {{ .Values.build }}_LOGIN_LDAP_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ $secret_name }}
                  key: ldapPass
{{- end }}
{{ if .Values.allure.auth.oidc }}
            - name: {{ .Values.build }}_LOGIN_OPENID_DEFAULTROLE
              value: {{ .Values.allure.auth.defaultRole }}
            - name: {{ .Values.build }}_LOGIN_OPENID_GROUPROLEATTRIBUTE
              value: {{ .Values.allure.auth.oidc.roleAttribute }}
{{- if .Values.allure.auth.oidc.syncRoles }}
            - name: {{ .Values.build }}_LOGIN_OPENID_SYNCROLES
              value: "{{ .Values.allure.auth.oidc.syncRoles }}"
            - name: {{ .Values.build }}_LOGIN_OPENID_GROUPAUTHORITIES_ROLEUSERGROUPS
              value: "{{ .Values.allure.auth.oidc.userGroupName }}"
            - name: {{ .Values.build }}_LOGIN_OPENID_GROUPAUTHORITIES_ROLEADMINGROUPS
              value: "{{ .Values.allure.auth.oidc.adminGroupName }}"
{{- end }}
{{- end }}
{{- if .Values.allure.auth.saml.enabled }}
            - name: {{ .Values.build }}_LOGIN_SAML2_DEFAULTROLE
              value: {{ .Values.allure.auth.defaultRole }}
            - name: {{ .Values.build }}_LOGIN_SAML2_FIRSTNAMEATTRIBUTE
              value: {{ .Values.allure.auth.saml.firstNameAttribute }}
            - name: {{ .Values.build }}_LOGIN_SAML2_LASTNAMEATTRIBUTE
              value: {{ .Values.allure.auth.saml.lastNameAttribute }}
            - name: {{ .Values.build }}_LOGIN_SAML2_EMAILATTRIBUTE
              value: {{ .Values.allure.auth.saml.emailAttribute }}
{{- end }}
{{- if .Values.allure.auth.saml.syncRoles }}
            - name: {{ .Values.build }}_LOGIN_SAML2_SYNCROLES
              value: "{{ .Values.allure.auth.saml.syncRoles }}"
            - name: {{ .Values.build }}_LOGIN_SAML2_GROUPROLEATTRIBUTE
              value: {{ .Values.allure.auth.saml.groups.groupRoleAttribute }}
            - name: {{ .Values.build }}_LOGIN_SAML2_GROUPAUTHORITIES_ROLEUSERGROUPS
              value: "{{ .Values.allure.auth.saml.groups.roleUserGroups }}"
            - name: {{ .Values.build }}_LOGIN_SAML2_GROUPAUTHORITIES_ROLEADMINGROUPS
              value: "{{ .Values.allure.auth.saml.groups.roleAdminGroups }}"
{{- end }}
{{- if .Values.smtp.enabled }}
            - name: SPRING_MAIL_HOST
              value: {{ .Values.smtp.host }}
            - name: SPRING_MAIL_PORT
              value: "{{ .Values.smtp.port }}"
            - name: SPRING_MAIL_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ $secret_name }}
                  key: "smtpUsername"
            - name: ALLURE_MAIL_FROM
              value: {{ .Values.smtp.from }}
            - name: SPRING_MAIL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ $secret_name }}
                  key: "smtpPassword"
            - name: SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH
              value: {{ .Values.smtp.authEnabled | quote }}
            - name: SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE
              value: {{ .Values.smtp.startTLSEnabled | quote }}
            - name: SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_REQUIRED
              value: {{ .Values.smtp.startTLSRequired | quote }}
            - name: SPRING_MAIL_PROPERTIES_MAIL_SMTP_SSL_ENABLE
              value: {{ .Values.smtp.sslEnabled | quote }}
            - name: SPRING_MAIL_PROPERTIES_MAIL_SMTP_SSL_TRUST
              value: {{ .Values.smtp.sslTrust | quote }}
{{- end }}
{{- if or (eq .Values.postgresql.external.sslMode "require") (eq .Values.postgresql.external.sslMode "verify-ca") (eq .Values.postgresql.external.sslMode "verify-full") }}
            - name: TLS_DB_ENDPOINTS
              value: "{{ .Values.postgresql.external.uaaHost}}:{{ .Values.postgresql.external.uaaPort }}"
{{- end }}
{{- if or (.Values.licenseKey) (.Values.licence.enabled) }}
            - name: {{ .Values.build }}_LICENSE_BODY
              valueFrom:
                secretKeyRef:
                  name: {{ $secret_name }}
                  key: "licenseKey"
{{- end }}
{{- if or (.Values.subscriptionId) (.Values.subscription.enabled) }}
            - name: {{ .Values.build }}_LICENSE_SUBSCRIPTIONID
              valueFrom:
                secretKeyRef:
                  name: {{ $secret_name }}
                  key: "subId"
            - name: {{ .Values.build }}_LICENSE_APITOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ $secret_name }}
                  key: "licenseKey"
{{- end }}
{{- if .Values.certificates.staticCerts }}
            - name: STATIC_CERTS
              value: "{{ join "," .Values.certificates.staticCerts }}"
{{- end }}
{{- range $name, $value := .Values.uaa.env.open }}
            - name: {{ $name | quote }}
              value: {{ $value | quote }}
{{- end }}
{{- end }}
{{- if .Values.uaa.probes.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.allure.uaaContextPath }}management/health
              port: http
{{ toYaml .Values.uaa.probes.liveness.probe | indent 12 }}
          readinessProbe:
            httpGet:
              path: {{ .Values.allure.uaaContextPath }}management/health
              port: http
{{ toYaml .Values.uaa.probes.readiness.probe | indent 12 }}
{{- end }}
{{- with .Values.uaa.resources }}
          resources:
{{ toYaml . | indent 12 }}
{{- end }}
{{- if .Values.vault.enabled }}
          volumeMounts:
            - name: vault-creds
              mountPath: "/mnt/secrets-store"
              readOnly: true
{{- if .Values.postgresql.external.pgbouncer.enabled }}
        - name: pgbouncer
          image: {{ .Values.postgresql.external.pgbouncer.image | quote }}
          imagePullPolicy: {{ .Values.registry.pullPolicy }}
          volumeMounts:
            - name: vault-creds
              mountPath: "/mnt/secrets-store"
              readOnly: true
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - killall -INT pgbouncer && sleep 120
          env:
            - name: DB_HOST
              value: {{ .Values.postgresql.external.uaaHost }}
            - name: DB_PORT
              value: {{ .Values.postgresql.external.uaaPort | quote }}
            - name: DB_NAME
              value: {{ .Values.postgresql.external.uaaDbName }}
            - name: POOL_MODE
              value: {{ .Values.postgresql.external.pgbouncer.operationMode }}
            - name: SERVER_RESET_QUERY
              value: DISCARD ALL
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: {{ $secret_name }}
                  key: uaaDbUser
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ $secret_name }}
                  key: uaaDbPass
{{- end }}
      volumes:
        - name: vault-creds
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: {{ template "allure-testops.fullname" . }}
{{- end }}